#!/bin/bash -e

CDIR=$(dirname "${BASH_SOURCE}")

mkdir -p build/${CLUSTER_NAME}

echo $AZURE_LOCATION
echo $AZURE_VM_KEY_NAME
echo $AZURE_VHD_URI
echo $INTERNAL_TLD
echo $CLUSTER_NAME
CIDR_ALLOW_SSH=`$CDIR/myip`
echo $CIDR_VNET
echo $CIDR_PODS
echo $CIDR_SERVICE_CLUSTER
echo $K8S_SERVICE_IP
echo $K8S_DNS_IP
echo $ETCD_IPS
echo $HYPERKUBE_IMAGE
echo $HYPERKUBE_TAG

SUBSCRIPTION_ID=${SUBSCRIPTION_ID:-`az account show -o json --query="id" | tr -d '"'`}
SP_PATH=${SP_PATH:-~/.azure/acstack-sp-${SUBSCRIPTION_ID}.json}
TOKEN_ID=$(cat /dev/urandom | env LC_CTYPE=C tr -dc 'a-f0-9' | fold -w 6 | head -n 1)
TOKEN_CONTENT=$(cat /dev/urandom | env LC_CTYPE=C tr -dc 'a-f0-9' | fold -w 16 | head -n 1)
BOOTSTRAP_TOKEN="${TOKEN_ID}.${TOKEN_CONTENT}"

echo "Subscription ID: ${SUBSCRIPTION_ID}"
echo "Location: ${AZURE_LOCATION}"
echo "Cluster Name: ${CLUSTER_NAME}"
echo "Service Principal Path: ${SP_PATH}"

if [ -a "${SP_PATH}" ]; then
	client_id=`cat ${SP_PATH} | jq -r .appId`
	client_secret=`cat ${SP_PATH} | jq -r .password`
	tenant_id=`cat ${SP_PATH} | jq -r .tenant`
else
	echo "Service principal file not found! Generating one @ ${SP_PATH}"
	az ad sp create-for-rbac -n azure-stack-sp-${TOKEN_ID} -o json > ${SP_PATH}
	client_id=`cat ${SP_PATH} | jq -r .appId`
	client_secret=`cat ${SP_PATH} | jq -r .password`
	tenant_id=`cat ${SP_PATH} | jq -r .tenant`
fi

if [ -z "${client_id}" ]; then
	echo "client_id was not set! Something happened when generating the service principal or when trying to read the sp file!"
	exit 1
fi

if [ -z "${client_secret}" ]; then
	echo "client_secret was not set! Something happened when generating the service principal or when trying to read the sp file!"
	exit 1
fi

if [ -z "${tenant_id}" ]; then
	echo "tenant_id was not set! Something happened when generating the service principal or when trying to read the sp file!"
	exit 1
fi

cat <<EOF > build/${CLUSTER_NAME}/terraform.tfvars
# Generated by scripts/init-variables.sh
azure = {
  subscription_id = "${SUBSCRIPTION_ID}"
  client_id       = "${client_id}"
  client_secret   = "${client_secret}"
  tenant_id       = "${tenant_id}"
}

cidr = {
  allow-ssh = "${CIDR_ALLOW_SSH}"
  pod = "${CIDR_PODS}"
  service-cluster = "${CIDR_SERVICE_CLUSTER}"
  vnet = "${CIDR_VNET}"
  controller = "${CIDR_CONTROLLER}"
  node = "${CIDR_NODE}"
  etcd = "${CIDR_ETCD}"
  dmz = "${CIDR_DMZ}"
}
k8s = {
  hyperkube-image = "${HYPERKUBE_IMAGE}"
  hyperkube-tag = "${HYPERKUBE_TAG}"
}
dns-service-ip = "${K8S_DNS_IP}"
internal-tld = "${INTERNAL_TLD}"
k8s-service-ip = "${K8S_SERVICE_IP}"
name = "${CLUSTER_NAME}"
azure_vhd_uri = "${AZURE_VHD_URI}"
etcd-ips = "${ETCD_IPS}"
master-ips = "${MASTER_IPS}"
kube-api-internal-ip = "${KUBE_API_INTERNAL_IP}"
kube-api-public-fqdn = "${KUBE_API_PUBLIC_FQDN}"
bootstrap_token = "${BOOTSTRAP_TOKEN}"
location = "${AZURE_LOCATION}"
node_count = "${NODE_COUNT}"
EOF

cat build/${CLUSTER_NAME}/terraform.tfvars
