#cloud-config

write_files:
  - path: "/etc/netplan/eth1.yaml"
    permissions: "0755"
    content: |
      network:
        version: 2
        ethernets:
          eth1:
            dhcp4: true
  - path: "/etc/systemd/system/kubelet.service.d/0-containerd.conf"
    permissions: "0755"
    content: |
      [Service]
      Environment="KUBELET_EXTRA_ARGS=--container-runtime=remote --runtime-request-timeout=15m --container-runtime-endpoint=unix:///run/containerd/containerd.sock"
  - path: "/etc/kubernetes/azure.json"
    permissions: "0755"
    content: |
      {
        "cloud":"AzurePublicCloud",
        "tenantId": "${TENANT_ID}",
        "subscriptionId": "${SUBSCRIPTION_ID}",
        "aadClientId": "${CLIENT_ID}",
        "aadClientSecret": "${CLIENT_SECRET}",
        "location": "${LOCATION}",
        "resourceGroup": "${NAME}",
        "routeTableName": "k8s-controller-routetable",
        "subnetName": "private",
        "vnetName": "${NAME}",
        "vnetResourceGroup": "",
        "primaryAvailabilitySetName": "${AVAILABILITY_SET_NAME}",
        "cloudProviderBackoff": false,
        "cloudProviderBackoffRetries": 0,
        "cloudProviderBackoffExponent": 0,
        "cloudProviderBackoffDuration": 0,
        "cloudProviderBackoffJitter": 0,
        "cloudProviderRatelimit": false,
        "cloudProviderRateLimitQPS": 0,
        "cloudProviderRateLimitBucket": 0,
        "useManagedIdentityExtension": false,
        "useInstanceMetadata": true,
        "providerVaultName": "",
        "providerKeyName": "k8s",
        "providerKeyVersion": ""
      }
  - path: "/etc/systemd/system/kubelet.service"
    permissions: "0755"
    content: |
      [Unit]
      Description=Kubernetes Kubelet
      Documentation=https://github.com/kubernetes/kubernetes
      After=containerd.service
      Requires=containerd.service

      [Service]
      ExecStart=/usr/local/bin/kubelet \
        --address=0.0.0.0 \
        --allow-privileged=true \
        --anonymous-auth=false \
        --authorization-mode=Webhook \
        --bootstrap-kubeconfig=/etc/kubernetes/bootstrap-kubelet.conf \
        --client-ca-file=/etc/kubernetes/ssl/ca.pem \
        --cloud-config=/etc/kubernetes/azure.json \
        --cloud-provider=azure \
        --cluster-dns=${DNS_SERVICE_IP} \
        --cluster-domain=cluster.local \
        --container-runtime=remote \
        --container-runtime-endpoint=unix:///run/containerd/containerd.sock \
        --enforce-node-allocatable=pods \
        --eviction-hard=memory.available<100Mi,nodefs.available<10%,nodefs.inodesFree<5% \
        --feature-gates=Accelerators=true \
        --image-gc-high-threshold=85 \
        --image-gc-low-threshold=80 \
        --image-pull-progress-deadline=2m \
        --hostname-override=${HOSTNAME}  \
        --keep-terminated-pod-volumes=false \
        --kubeconfig=/var/lib/kubelet/kubeconfig \
        --network-plugin=cni \
        --max-pods=50 \
        --node-labels=kubernetes.io/role=node,nodepool=nodepool1,storageprofile=managed,storagetier=Standard_LRS,kubernetes.azure.com/cluster=${NAME} \
        --non-masquerade-cidr=${POD_CIDR} \
        --pod-infra-container-image=k8s-gcrio.azureedge.net/pause-amd64:3.1 \
        --register-node=true \
        --rotate-certificates=true \
        --runtime-request-timeout=15m \
        --tls-cert-file=/var/lib/kubelet/pki/kubelet.crt \
        --tls-private-key-file=/var/lib/kubelet/pki/kubelet.key \
        --v=2
      Restart=on-failure
      RestartSec=5

      [Install]
      WantedBy=multi-user.target
  - path: "/etc/systemd/system/kube-proxy.service"
    permissions: "0755"
    content: |
      [Unit]
      Description=Kubernetes Kube Proxy
      Documentation=https://github.com/kubernetes/kubernetes

      [Service]
      ExecStart=/usr/local/bin/kube-proxy \
        --cluster-cidr=${POD_CIDR} \
        --hostname-override=${HOSTNAME} \
        --kubeconfig=/var/lib/kube-proxy/kube-proxy.kubeconfig \
        --feature-gates=ExperimentalCriticalPodAnnotation=true
        --v=2
      Restart=on-failure
      RestartSec=5

      [Install]
      WantedBy=multi-user.target

